[1mdiff --git a/psw/conquer_opts.c b/psw/conquer_opts.c[m
[1mindex f16468d..32226d1 100644[m
[1m--- a/psw/conquer_opts.c[m
[1m+++ b/psw/conquer_opts.c[m
[36m@@ -6,7 +6,7 @@[m
/*   By: svan-der <svan-der@student.codam.nl>         +#+                     */[m
/*                                                   +#+                      */[m
/*   Created: 2020/03/03 17:49:34 by svan-der      #+#    #+#                 */[m
/*   Updated: [31m[-2020/07/20 12:59:40-][m[32m{+2020/07/21 13:55:47+}[m by svan-der      ########   odam.nl         */
/*                                                                            */[m
/* ************************************************************************** */[m

[36m@@ -231,17 +231,15 @@[m [mchar	*presort_stack_b(t_pw_var *stvar, t_stack *current, int *i)[m
		// ft_printf(CYN"min:%i max:%i current:%i i:%i\n"RESET, stvar->min, stvar->max, current->num, *i);[m
		if (current->num < stvar->min)[m
			find_min(temp, stvar->min, i);[m
[31m[-//-][m		else if (current->num > stvar->max)[31m[-//-][m
			find_max(temp, stvar->max, i);
		else if (current->num > stvar->min && current->num < stvar->max)[m
			oper_b = find_pos(stvar, current, temp, i);[m
		// if [31m[-(current->num < stvar->max)-][m[32m{+(*i == (stvar->argc - stvar->index))+}[m
		// 	[31m[-oper_b-][m[32m{+*i+}[m = [31m[-find_pos(stvar, current, temp, i);-][m[32m{+0;+}[m
	}[m
[31m[-	if (*i == 1)-][m
[31m[-		return (SB);-][m
	if (*i > 1)[m
		oper_b = fastest_rotate(stvar, 'b', [31m[-stvar->index);-][m[32m{+i);+}[m
	// if (oper_b)[m
	// 	ft_printf("oper_b:%s i:%i\n", oper_b, *i);[m
	return (oper_b);[m
[36m@@ -325,31 +322,30 @@[m [mvoid	sort_top(t_pw_var *stvar, t_stack *top)[m
{[m
	char	*instr;[m
	char	*instr_b;[m
[31m[-	int		ret;-][m
	int		i;[m
	[32m{+int		j;+}[m
[32m{+	int		ret;+}[m

	instr = fastest_rotate(stvar, 'a', [32m{+&top->dist_top);+}[m
[32m{+	// ft_printf("top->dist_top:%i\n",+}[m top->dist_top);
	// ft_printf("rotate\n");[m
	[32m{+i = top->dist_top;+}[m
[32m{+	// ft_printf("sort_top instr:%s top->dist_top:%i\n", instr, top->dist_top);+}[m
	if (top->dist_top > 0)[m
		do_op(stvar, instr, 'a', top->dist_top);[m
[31m[-do_op(stvar, PB, 'b', 1);-][m
[31m[-	// print_stack_list(stvar->stack_b, 'b');-][m	// instr_b = presort_stack_b(stvar, top, [31m[-&i);-][m[32m{+&j);+}[m
	// if (instr_b != NULL)[m
	// {[m
	// 	[31m[-ret = check_dble(stvar, instr,-][m[32m{+// ft_printf("instr_b:%s i:%i\n",+}[m instr_b, [31m[-ft_min(top->dist_top, i));-][m[32m{+i);+}[m
	// 	[31m[-if (ret == -1 && instr_b != NULL)-][m[32m{+// ft_printf("instr_b:%s j:%i instr:%s i:%i\n", instr_b, j, instr, i);+}[m
	// 	do_op(stvar, instr_b, 'b', [31m[-i);-][m[32m{+j);+}[m
[32m{+	// 	ret = check_dble(stvar, instr, instr_b, ft_min(i, j));+}[m
	// }[m
	[32m{+if (ret != -1)+}[m
[32m{+		instr = NULL;+}[m
[32m{+	do_op(stvar, PB, 'b', 1);+}[m
	find_solution(stvar, [31m[-top, instr);-][m
[31m[-	// print_stack_list(stvar->stack_a, 'a');-][m
[31m[-	// ft_printf("push\n");-][m[32m{+stvar->stack_b, NULL);+}[m
	// print_stack_list(stvar->stack_b, 'b');[m
[31m[-	// instr = finar *oper_a, d_solution(stvar, stvar->stack_b, NULL);-][m
[31m[-	// if (instr != NULL)-][m
[31m[-	// 	do_op(stvar, instr, 'b', 1);-][m
}[m

void	sort_top_bottom(t_pw_var *stvar, int i, t_stack *top, t_stack *bottom)[m
[36m@@ -400,54 +396,29 @@[m [mvoid	sort_bottom(t_pw_var *stvar, t_stack *bottom)[m
	int		i;[m
	int		ret;[m

	instr = fastest_rotate(stvar, 'a', [31m[-bottom->dist_top);-][m[32m{+&bottom->dist_top);+}[m
	// ft_printf(RED"instr is:%s dist_top:%i\n"RESET, instr, [31m[-bottom->dist_top);-][m
[31m[-	if (ft_strnequ(instr, RR, 2))-][m
[31m[-	{-][m
[31m[-		i = stvar->index - bottom->dist_top;-][m
[31m[-		if (i != 0)-][m
[31m[-			do_op(stvar, instr, 'a', i);-][m
[31m[-		do_op(stvar, PB, 'b', 1);-][m
[31m[-		// print_stack_list(stvar->stack_b, 'b');-][m

[31m[-		// instr_b = presort_stack_b(stvar, bottom, &j);-][m
[31m[-		// if (instr_b != NULL)-][m
[31m[-		// {-][m
[31m[-		// 	ret = check_dble(stvar, instr, instr_b, ft_min(i, j));-][m
[31m[-		// 	if (ret == -1 && instr_b != NULL)-][m
[31m[-		// 		do_op(stvar, instr_b, 'b', i);-][m
[31m[-		// }-][m

[31m[-		// if (instr_b != NULL)-][m
[31m[-		// 	ret = check_dble(stvar, instr, instr_b, ft_min(i, j));-][m
[31m[-		// print_stack_list(stvar->stack_a, 'a');-][m[32m{+bottom->dist_top);s+}[m
	// [31m[-find_solution(stvar, bottom, NULL);-][m
[31m[-	}-][m
[31m[-	else-][m
[31m[-	{-][m[32m{+ft_printf("num is:%i\n", num);+}[m
	i = bottom->dist_top;[m
	[32m{+// ft_printf("instr:%s bottom->dist_top:%i\n", instr, i);+}[m
	if (i != 0)[m
		do_op(stvar, instr, 'a', i);[m
	[32m{+//+}[m do_op(stvar, PB, 'b', 1);
	// instr_b = presort_stack_b(stvar, bottom, &j);[m
	// if (instr_b != NULL)[m
	// {[m
	[32m{+// 	// ft_printf("instr_b:%s j:%i instr:%s i:%i\n", instr_b, j, instr, i);+}[m
[32m{+	// 	do_op(stvar, instr_b, 'b', j);+}[m
	// 	ret = check_dble(stvar, instr, instr_b, ft_min(i, j));[m
	// 	[32m{+//+}[m if (ret == -1 && instr_b != NULL)[31m[-// 		do_op(stvar, instr_b, 'b', i);-][m
	// }[m
[31m[-// ret = check_dble(stvar, instr, instr_b, ft_min(i, j));-][m
[31m[-		//-][m	do_op(stvar, [31m[-instr, 'a', bottom->dist_top);-][m[32m{+PB, 'b', 1);+}[m
	// [31m[-ft_printf("bottom->index:%i bottom->dist_top:%i\n", bottom->index, bottom->dist);-][m
[31m[-		// find_solution(stvar, bottom, instr);-][m
[31m[-		// i = bottom->dist_top;-][m[32m{+if (ret != -1)+}[m
	// 	instr = [31m[-check_double(stvar, instr, bottom->dist_top, bottom);-][m
[31m[-		// do_op(stvar, instr, 'a', bottom->dist_top);-][m
[31m[-	}-][m
[31m[-	// print_stack_list(stvar->stack_b, 'b');-][m[32m{+NULL;+}[m
	find_solution(stvar, stvar->stack_b, NULL);[m
	[32m{+// print_stack_list(stvar->stack_b, 'b');+}[m
[32m{+	// find_solution(stvar, stvar->stack_b, NULL);+}[m

}[m

void	check_top_b(t_pw_var *stvar)[m
[36m@@ -458,7 +429,7 @@[m [mvoid	check_top_b(t_pw_var *stvar)[m

	if (stvar->stack_b && stvar->stack_b->next)[m
	{[m
		// ft_printf("goin check [31m[-top_B\n");-][m[32m{+top_B\n\n");+}[m
		i = 0;[m
		set_min_max(stvar, 'b');[m
		// ft_printf("max is:%i\n in B:%i\n", stvar->max, stvar->stack_b->num);[m
[36m@@ -466,15 +437,11 @@[m [mvoid	check_top_b(t_pw_var *stvar)[m
			return ;[m
		else[m
		{[m
[31m[-			// temp = find_max(stvar->stack_b, stvar->max, &i);-][m
[31m[-			// ft_printf("i is:%i\n", i);-][m
[31m[-			// print_stack_b(&stvar->stack_b, 1);-][m
[31m[-			// temp = find_high(stvar, 'b', &i);-][m
			find_max(stvar->stack_b, stvar->max, &i);[m
[31m[-			// ft_printf("i:%i\n", i);-][m
			// sort_stack_b(stvar);[m
			// print_stack_b(&stvar->stack_b, 1);[m
			str = fastest_rotate(stvar, 'b', [31m[-i);-][m[32m{+&i);+}[m
[32m{+			// print_stack_list(stvar->stack_b, 'b');+}[m
			// ft_printf("str is:%s i:%i\n", str, i);[m
			do_op(stvar, str, 'b', i);[m
			// print_stack_list(stvar->stack_b, 'b');[m
[36m@@ -493,7 +460,6 @@[m [mvoid	part_sort(t_pw_var *stvar, int argc, int i)[m
	j = argc;[m
	while (j)[m
	{[m
[31m[-		// ft_printf("\n\n");-][m
		// ft_printf("j is:%i\n", j);[m
		res = 0;[m
		top = stvar->stack_a;[m
[36m@@ -514,12 +480,14 @@[m [mvoid	part_sort(t_pw_var *stvar, int argc, int i)[m
			{[m
				// ft_printf(BLU"=================== OPTION 2 ==============\n\n"RESET);[m
				sort_top(stvar, top);[m
				[32m{+// find_part(stvar, i);+}[m
			}[m
			else if (bottom->part_id == i)[m
			{[m
				// ft_printf("\n");[m
				// ft_printf(YEL"=================== OPTION 3 ==============\n\n"RESET);[m
				[32m{+//+}[m sort_bottom(stvar, bottom);
				[32m{+find_part(stvar, i);+}[m
			}[m
			// print_stack_list(stvar->stack_b, 'b');[m
		}[m
[36m@@ -533,7 +501,7 @@[m [mvoid	part_sort(t_pw_var *stvar, int argc, int i)[m
		// print_stack_list(stvar->stack_b, 'b');[m
		j -= 1;[m
	}[m
	// [31m[-ft_printf("\n\n");-][m[32m{+ft_printf("END\n\n");+}[m
}[m

int		do_op(t_pw_var *stvar, char *str, char c, int num)[m
[36m@@ -555,22 +523,50 @@[m [mint		do_op(t_pw_var *stvar, char *str, char c, int num)[m
	return (ret);[m
}[m

char	*fastest_rotate(t_pw_var *stvar, char c, int [31m[-index)-][m[32m{+*index)+}[m
[32m{+{+}[m
[32m{+	int i;+}[m
[32m{+	int len;+}[m

[32m{+	len = (c == 'a') ? stvar->index : (stvar->argc - stvar->index);+}[m
[32m{+	// i = (len % 2) ? ((len + 1) / 2) : len / 2;+}[m
[32m{+	i = (len % 2) ? ((len / 2) + 1) : len / 2;+}[m
[32m{+	// ft_printf("len:%i\t i:%i\n", len, i);+}[m
[32m{+	// ft_printf("char:%c\tindex:%i\t i:%i len:%i\n", c, *index, i, len);+}[m
[32m{+	// if (index <= i)+}[m
[32m{+	if (*index < i)+}[m
[32m{+	{+}[m
[32m{+		return (c == 'a' ? RA : RB);+}[m
[32m{+	}+}[m
[32m{+	else+}[m
[32m{+	{+}[m
[32m{+		*index = len - *index;+}[m
[32m{+		return (c == 'a' ? RRA : RRB);+}[m
[32m{+	}+}[m
[32m{+}+}[m

[32m{+char	*fastest_rotate_b(t_pw_var *stvar, char c, int *index)+}[m
{[m
	int i;[m
	int len;[m

	[32m{+// ft_printf(YEL"FASTEft_printf("SWAP\n");ST ROTATE B\n"RESET);+}[m
	len = (c == 'a') ? stvar->index : (stvar->argc - stvar->index);[m
	// i = (len % 2) ? ((len + 1) / 2) : len / 2;[m
	i = (len % 2) ? ((len / 2) + 1) : len / 2;[m
	// ft_printf("len:%i\t i:%i\n", len, i);[m
	// ft_printf("char:%c\tindex:%i\t [31m[-i:%i\n",-][m[32m{+i:%i len:%i\n",+}[m c, [31m[-index, i);-][m[32m{+*index, i, len);+}[m
	// if (index <= i)[m
	if [31m[-(index <-][m[32m{+(*index >+}[m i)
	[32m{+{+}[m
[32m{+		*index = len - *index;+}[m
		return (c == 'a' ? RA : RB);[m
	[32m{+}+}[m
	else[m
	[32m{+{+}[m
		return (c == 'a' ? RRA : RRB);[m
	}[m
[32m{+}+}[m

void	update_stack(t_pw_var *stvar, char c)[m
{[m
